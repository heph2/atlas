#!/usr/bin/env perl
# Copyright (C) 2017â€“2021  Heph <srht@mrkeebs.eu>
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

=encoding utf8

=head1 Atlas

Atlas is a simple feed rss generator. It acts as a http server listening on port 9000, when receive an HTTP GET request of this kind:
'http://localhost:9000/?url=gemini://example.com'

Atlas will retrieve the query URL, connect to the URL via a barebones gemini client and retrive all the URLs that match the specification for blog posts:

absolute/relative URL YYYY-MM-DD - TITLE

Then generate a feed rss and return it to the client.


=head2 Installation

Manual install:

     perl Makefile.PL
     make
     make install

=head2 Quickstart

First you need to start the server:

     atlas

This starts the server in the foreground for C<localhost:9000>
Then you need to add the gemini capsules that you want to follow
in your favorite feed rss reader ( I'm using Elfeed ), in this way:


	   http://localhost:9000/?url=gemini://example1.com
	   http://localhost:9000/?url=gemini://example2.com
	   http://localhost:9000/?url=gemini://example3.com

You can also add another query that specify the number of articles/posts to retrieve ( default is 10 )

http://localhost:9000/?url=gemini://example1.com&5

This will retrive only 5 articles from example1.com

=head2 Options

These are the options Atlas knows about:

=over

=item C<--host> is the address to use; the default is 127.0.0.1

=item C<--port> is the port to use; the default is 9000

=back

=head2 Dependencies

There are some Perl dependencies you need to satisfy in order
to run this program:

=over

=item L<IO::Socket::SSL>

=item L<URI>

=item L<XML::RSS>

=item L<HTTP::Daemon>

=item L<DateTime::Fromat::Strptime>

=back

=head2 License

GNU Affero General Public License

=cut

use warnings;
use strict;
use v5.10.0;
use Getopt::Long;
use IO::Socket::SSL;
use URI;
use XML::RSS;
use DateTime::Format::Strptime;
use HTTP::Daemon;
use HTTP::Status;

our $port ||= 9000;
our $host ||= "127.0.0.1";

my %args = ();
GetOptions ("host=s"  => \$host,
            "port=i"  => \$port)
   or die("Error in command line arguments\n");

## http_server is a simple http server that listen to localhost ( port 9000 )
## and wait for a particular GET request that contains a gemini URL as a
## query string, then return a feed rss of that gemini URL.
sub http_server {
    my $host = $_[0];
    my $port = $_[1];
    my $d = HTTP::Daemon->new(
        LocalAddr => $host,
        LocalPort => $port
        ) || die;
    print "Please contact me at: <URL:", $d->url, ">\n";

    while (my $c = $d->accept) {
        my $r = $c->get_request;
        if ($r) {
            if ($r->method eq 'GET') {
                my $URL = $r->uri;
                my $feed = handle_queries($URL);
                my $resp = HTTP::Response->new( 200, 'OK');
                $resp->header('Content-Type' => 'text/xml');
                $resp->content($feed);
                $c->send_response($resp);
            } else {
                $c->send_error(RC_FORBIDDEN)
            }
        }
        $c = undef;  # close connection
    }
}

## take the URL sent by the client and search for a query, then return
## the feed
## There are two queries available:
## ?url=           => Generate an RSS feed for the given URL
##
## ?feed=          => Retrive already generated RSS feed and return it
sub handle_queries {
    my $URL = $_[0];
    my ($query_url, $query_counter, $feed);

    ## I have to check if another parameter is passed after the URL
    ## if '&' is present it means that the user pass a number of articles
    ## to fetch, if not then use default value (10)
    if ($URL =~ /&/ && $URL =~ /\?url=/) {
        ($query_url) = $URL =~ /(gemini:\/\/.*)&/;
        ($query_counter) = $URL =~ /&(.*)/;
        $feed = feed_generator($query_url, $query_counter);
    } elsif ($URL =~ /\?feed=/ ) {
        ($query_url) = $URL =~ /(gemini:\/\/.*)/;
        $feed = get_feed($query_url);
    } elsif ($URL =~ /\?url=/) {
        ($query_url) = $URL =~ /(gemini:\/\/.*)/;
        $query_counter = 10;
        $feed = feed_generator($query_url, $query_counter);
    } else {
        $feed = "<h1>Please provide a valid gemini URL</h1>\n";
    }
    return $feed;
}

## barebones gemini client
sub client {
    my ( $remote_host, $remote_port, $abs_url ) = @_;
    my $socket = IO::Socket::SSL->new(
        PeerHost => $remote_host,
        PeerPort => $remote_port,
        SSL_verify_mode => SSL_VERIFY_NONE,
        )
        or die "error=$!, ssl_error=$SSL_ERROR";
    
    # send data to client
    # gemini accept only URL\r\n as a request
    my $request = "$abs_url\r\n";

    print $socket $request;
    
    # read data sent from server
    my $response;
    while (my $line = <$socket>) {
        $response .= $line;
    }

    $socket->close();
    return $response;
}

# extract_links check each lines of the gemtext, find all the link ( => )
# then check if it's a valid url
# URI YYYY-MM-DD - TITLE
sub extract_links {
    my ($gemtext, $number_of_articles) = @_;
    my @lines = split '\n', $gemtext;
    my %links;

    my $counter = 1;
    for my $line (@lines) {
        if ($line =~ /^=>/) {
            $line =~ s/^=>\s*//g;
            $line =~ /^(\S+)(.*)/;
            my $url = $1;
            my $url_descr = $2;

            # Check if url_descr have YYYY-MM-DD - TITLE
            if ($url_descr =~ /\d{4}-\d{2}-\d{2}/) {
                $links{$url} = $url_descr;

                ## This is for reading only number of articles
                ## specified by the user. If nothing is specified in the URL
                ## 10 will be the default value
                last if ($counter++ == $number_of_articles);
            }
        }
    }
    return %links
}

## This function roughly convert the gemtext retrivied from gemini
## blog-post and convert it to html for create a feed RSS 2.0
sub html_convert {
    my ($gemtext) = @_;
    my @lines = split '\n', $gemtext;

    my $preformatted = 0;
    my $listmode = 0;
    my $html_file;
    for ( @lines[1 .. $#lines] ) {
        ## handle links
        if ($_ =~ /^=>/) {
            $_ =~ s/^=>\s*//g;
            my ($url, $descr) = $_ =~ /^(\S+)(.*)/;
            $html_file .= "<p><a href=\"$url\">$descr</a></p>\n";
            next;
        }
        
        ## handle preformatted block
        if ($_ =~ /^```/ && $preformatted == 0) {
            $preformatted = 1; # true
            $html_file .= "<pre>\n";
            next;
        } elsif ($_ =~ /^```/ && $preformatted == 1) {
            $preformatted = 0; # false
            $html_file .= "</pre>\n";
            next;
        } elsif ($preformatted == 1) {
            $html_file .= "$_\n";
            next;
        }
        
        ## handle unordered lists
        if ($_ =~ /^\*/ && $listmode == 0) {
            $listmode = 1;
            $html_file .= "<ul>\n";
            $_ =~ s/^\*\s*//g;
            $html_file .= "<li>$_</li>\n";
            next;
        } elsif ($_ =~ /^\*/) {
            $_ =~ s/^\*\s*//g;
            $html_file .= "<li>$_</li>\n";
            next;
        } elsif ($listmode == 1) {
            $listmode = 0;
            $html_file .= "</ul>\n";
        }
        
        ## handle headings and normal paragraph
        if ($_ =~ /^###/) {
            $_ =~ s/^###\s*//g;
            $html_file .= "<h3>$_</h3>\n";
            next;
        } elsif ($_ =~ /^##/) {
            $_ =~ s/^##\s*//g;
            $html_file .= "<h2>$_</h2>\n";
            next;
        } elsif ($_ =~ /^#/) {
            $_ =~ s/^#\s*//g;
            $html_file .= "<h1>$_</h1>\n";
        } elsif ($_ ne "") {
            $html_file .= "<p>$_</p>\n";
            next;
        }
    }
    return $html_file;
}

## retrieve title from gemtext
## needed for populate RSS <title> (MAIN title)
sub get_feed_title {
    my $gemtext = $_[0];
    my @lines = split '\n', $gemtext;
    my $title;
    for my $line (@lines) {
        if ($line =~ /^#/) {
            $title = substr($line, 1);
            return $title;
        }
    }
    return "";
}

## Retrive title and update time of a RSS Entry
## needed for populate rss <title> for each entry
sub get_feed_info {
    my $url_descr = $_[0];
    my ($update_time) = $url_descr =~ /(\d{4}-\d?\d-\d?\d)/;
    my ($entry_title) = $url_descr =~ /(?<=. )(.*)/g;

    my $parser = DateTime::Format::Strptime->new(
        pattern => '%F',
        on_error => 'croak',
        );
    my $dt = $parser->parse_datetime($update_time);
    return $dt, $entry_title;
}

## retrieve already generated feed rss
sub get_feed {
    my $query = $_[0];
    my $remote_port = 1965;
    my $url = URI->new( $query );
    my $remote_host = $url->authority;
    my $feed = client($remote_host, $remote_port, $query);
    $feed =~ s/^(.*\n){1}//; # remove 1st line
    return $feed;
}

## generate the feed rss 2.0
sub feed_generator {
    my $query = $_[0];
    my $counter = $_[1];  ## for the number of articles to download
    my $remote_port = 1965;

    my $url = URI->new( $query );
    my $remote_host = $url->authority;

    ## Call the client for the 1st request
    my $gemtext = client($remote_host, $remote_port, $query);

    ## get title
    my $feed_title = get_feed_title($gemtext);

    ## Extract all the links from the 1st request
    my %links = extract_links($gemtext, $counter);

    sub uri_class {
        my $uri = URI->new($_[0]);
        my $base_uri = $_[1];
        my $abs_url = $uri->abs($base_uri);
        return $abs_url;
    }

    ##### NOW START CREATING RSS #####

    my $rss = XML::RSS->new (version => '2.0');
    $rss->channel(title => $feed_title,
                  link => $query,
                  description => 'No Channel Description', 
        );

    for (keys %links) {
        ## get absolute URL
        my $abs_url = uri_class($_, $query);
        
        ## get gemtext
        my $gemtext = client($remote_host, $remote_port, $abs_url);
        
        ## Retrive feed info
        my ($dt, $title) = get_feed_info($links{$_});
        
        ## convert to html
        my $html_entry = html_convert($gemtext);

        $rss->add_item(title => "<![CDATA[\n$title]]>",
                       pubDate => $dt,
                       link => $_,
                       guid => $_,
                       description => "<![CDATA[\n$html_entry]]>",
            );
    }

    my $ret = $rss->as_string;
    $rss->as_string;
    print "feed generated\n";
    return $ret;
}


### CALL SERVER
http_server($host, $port);
